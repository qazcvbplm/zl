package com.dingdian.order.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dingdian.order.db.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tb_user".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "tb_user";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, long.class, "_id", true, "_id");
        public final static Property BoxPrice = new Property(1, String.class, "boxPrice", false, "BOX_PRICE");
        public final static Property GetModelFlag = new Property(2, int.class, "getModelFlag", false, "GET_MODEL_FLAG");
        public final static Property TsModelFlag = new Property(3, int.class, "tsModelFlag", false, "TS_MODEL_FLAG");
        public final static Property Id = new Property(4, int.class, "id", false, "ID");
        public final static Property IsDelete = new Property(5, int.class, "isDelete", false, "IS_DELETE");
        public final static Property Lat = new Property(6, String.class, "lat", false, "LAT");
        public final static Property Lng = new Property(7, String.class, "lng", false, "LNG");
        public final static Property OpenFlag = new Property(8, int.class, "openFlag", false, "OPEN_FLAG");
        public final static Property Rate = new Property(9, double.class, "rate", false, "RATE");
        public final static Property SchoolId = new Property(10, int.class, "schoolId", false, "SCHOOL_ID");
        public final static Property Score = new Property(11, int.class, "score", false, "SCORE");
        public final static Property SendModelFlag = new Property(12, int.class, "sendModelFlag", false, "SEND_MODEL_FLAG");
        public final static Property SendPrice = new Property(13, String.class, "sendPrice", false, "SEND_PRICE");
        public final static Property SendPriceAdd = new Property(14, String.class, "sendPriceAdd", false, "SEND_PRICE_ADD");
        public final static Property SendPriceAddByCountFlag = new Property(15, String.class, "sendPriceAddByCountFlag", false, "SEND_PRICE_ADD_BY_COUNT_FLAG");
        public final static Property SendTime = new Property(16, String.class, "sendTime", false, "SEND_TIME");
        public final static Property ShopAddress = new Property(17, String.class, "shopAddress", false, "SHOP_ADDRESS");
        public final static Property ShopCategoryId = new Property(18, int.class, "shopCategoryId", false, "SHOP_CATEGORY_ID");
        public final static Property ShopImage = new Property(19, String.class, "shopImage", false, "SHOP_IMAGE");
        public final static Property ShopLoginName = new Property(20, String.class, "shopLoginName", false, "SHOP_LOGIN_NAME");
        public final static Property ShopLoginPassWord = new Property(21, String.class, "shopLoginPassWord", false, "SHOP_LOGIN_PASS_WORD");
        public final static Property ShopName = new Property(22, String.class, "shopName", false, "SHOP_NAME");
        public final static Property ShopPhone = new Property(23, String.class, "shopPhone", false, "SHOP_PHONE");
        public final static Property Sort = new Property(24, long.class, "sort", false, "SORT");
        public final static Property StartPrice = new Property(25, String.class, "startPrice", false, "START_PRICE");
        public final static Property TopTitle = new Property(26, String.class, "topTitle", false, "TOP_TITLE");
        public final static Property VipDiscountFlag = new Property(27, int.class, "vipDiscountFlag", false, "VIP_DISCOUNT_FLAG");
        public final static Property Token = new Property(28, String.class, "token", false, "TOKEN");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tb_user\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: _id
                "\"BOX_PRICE\" TEXT," + // 1: boxPrice
                "\"GET_MODEL_FLAG\" INTEGER NOT NULL ," + // 2: getModelFlag
                "\"TS_MODEL_FLAG\" INTEGER NOT NULL ," + // 3: tsModelFlag
                "\"ID\" INTEGER NOT NULL ," + // 4: id
                "\"IS_DELETE\" INTEGER NOT NULL ," + // 5: isDelete
                "\"LAT\" TEXT," + // 6: lat
                "\"LNG\" TEXT," + // 7: lng
                "\"OPEN_FLAG\" INTEGER NOT NULL ," + // 8: openFlag
                "\"RATE\" REAL NOT NULL ," + // 9: rate
                "\"SCHOOL_ID\" INTEGER NOT NULL ," + // 10: schoolId
                "\"SCORE\" INTEGER NOT NULL ," + // 11: score
                "\"SEND_MODEL_FLAG\" INTEGER NOT NULL ," + // 12: sendModelFlag
                "\"SEND_PRICE\" TEXT," + // 13: sendPrice
                "\"SEND_PRICE_ADD\" TEXT," + // 14: sendPriceAdd
                "\"SEND_PRICE_ADD_BY_COUNT_FLAG\" TEXT," + // 15: sendPriceAddByCountFlag
                "\"SEND_TIME\" TEXT," + // 16: sendTime
                "\"SHOP_ADDRESS\" TEXT," + // 17: shopAddress
                "\"SHOP_CATEGORY_ID\" INTEGER NOT NULL ," + // 18: shopCategoryId
                "\"SHOP_IMAGE\" TEXT," + // 19: shopImage
                "\"SHOP_LOGIN_NAME\" TEXT," + // 20: shopLoginName
                "\"SHOP_LOGIN_PASS_WORD\" TEXT," + // 21: shopLoginPassWord
                "\"SHOP_NAME\" TEXT," + // 22: shopName
                "\"SHOP_PHONE\" TEXT," + // 23: shopPhone
                "\"SORT\" INTEGER NOT NULL ," + // 24: sort
                "\"START_PRICE\" TEXT," + // 25: startPrice
                "\"TOP_TITLE\" TEXT," + // 26: topTitle
                "\"VIP_DISCOUNT_FLAG\" INTEGER NOT NULL ," + // 27: vipDiscountFlag
                "\"TOKEN\" TEXT);"); // 28: token
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tb_user\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.get_id());
 
        String boxPrice = entity.getBoxPrice();
        if (boxPrice != null) {
            stmt.bindString(2, boxPrice);
        }
        stmt.bindLong(3, entity.getGetModelFlag());
        stmt.bindLong(4, entity.getTsModelFlag());
        stmt.bindLong(5, entity.getId());
        stmt.bindLong(6, entity.getIsDelete());
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(7, lat);
        }
 
        String lng = entity.getLng();
        if (lng != null) {
            stmt.bindString(8, lng);
        }
        stmt.bindLong(9, entity.getOpenFlag());
        stmt.bindDouble(10, entity.getRate());
        stmt.bindLong(11, entity.getSchoolId());
        stmt.bindLong(12, entity.getScore());
        stmt.bindLong(13, entity.getSendModelFlag());
 
        String sendPrice = entity.getSendPrice();
        if (sendPrice != null) {
            stmt.bindString(14, sendPrice);
        }
 
        String sendPriceAdd = entity.getSendPriceAdd();
        if (sendPriceAdd != null) {
            stmt.bindString(15, sendPriceAdd);
        }
 
        String sendPriceAddByCountFlag = entity.getSendPriceAddByCountFlag();
        if (sendPriceAddByCountFlag != null) {
            stmt.bindString(16, sendPriceAddByCountFlag);
        }
 
        String sendTime = entity.getSendTime();
        if (sendTime != null) {
            stmt.bindString(17, sendTime);
        }
 
        String shopAddress = entity.getShopAddress();
        if (shopAddress != null) {
            stmt.bindString(18, shopAddress);
        }
        stmt.bindLong(19, entity.getShopCategoryId());
 
        String shopImage = entity.getShopImage();
        if (shopImage != null) {
            stmt.bindString(20, shopImage);
        }
 
        String shopLoginName = entity.getShopLoginName();
        if (shopLoginName != null) {
            stmt.bindString(21, shopLoginName);
        }
 
        String shopLoginPassWord = entity.getShopLoginPassWord();
        if (shopLoginPassWord != null) {
            stmt.bindString(22, shopLoginPassWord);
        }
 
        String shopName = entity.getShopName();
        if (shopName != null) {
            stmt.bindString(23, shopName);
        }
 
        String shopPhone = entity.getShopPhone();
        if (shopPhone != null) {
            stmt.bindString(24, shopPhone);
        }
        stmt.bindLong(25, entity.getSort());
 
        String startPrice = entity.getStartPrice();
        if (startPrice != null) {
            stmt.bindString(26, startPrice);
        }
 
        String topTitle = entity.getTopTitle();
        if (topTitle != null) {
            stmt.bindString(27, topTitle);
        }
        stmt.bindLong(28, entity.getVipDiscountFlag());
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(29, token);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.get_id());
 
        String boxPrice = entity.getBoxPrice();
        if (boxPrice != null) {
            stmt.bindString(2, boxPrice);
        }
        stmt.bindLong(3, entity.getGetModelFlag());
        stmt.bindLong(4, entity.getTsModelFlag());
        stmt.bindLong(5, entity.getId());
        stmt.bindLong(6, entity.getIsDelete());
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(7, lat);
        }
 
        String lng = entity.getLng();
        if (lng != null) {
            stmt.bindString(8, lng);
        }
        stmt.bindLong(9, entity.getOpenFlag());
        stmt.bindDouble(10, entity.getRate());
        stmt.bindLong(11, entity.getSchoolId());
        stmt.bindLong(12, entity.getScore());
        stmt.bindLong(13, entity.getSendModelFlag());
 
        String sendPrice = entity.getSendPrice();
        if (sendPrice != null) {
            stmt.bindString(14, sendPrice);
        }
 
        String sendPriceAdd = entity.getSendPriceAdd();
        if (sendPriceAdd != null) {
            stmt.bindString(15, sendPriceAdd);
        }
 
        String sendPriceAddByCountFlag = entity.getSendPriceAddByCountFlag();
        if (sendPriceAddByCountFlag != null) {
            stmt.bindString(16, sendPriceAddByCountFlag);
        }
 
        String sendTime = entity.getSendTime();
        if (sendTime != null) {
            stmt.bindString(17, sendTime);
        }
 
        String shopAddress = entity.getShopAddress();
        if (shopAddress != null) {
            stmt.bindString(18, shopAddress);
        }
        stmt.bindLong(19, entity.getShopCategoryId());
 
        String shopImage = entity.getShopImage();
        if (shopImage != null) {
            stmt.bindString(20, shopImage);
        }
 
        String shopLoginName = entity.getShopLoginName();
        if (shopLoginName != null) {
            stmt.bindString(21, shopLoginName);
        }
 
        String shopLoginPassWord = entity.getShopLoginPassWord();
        if (shopLoginPassWord != null) {
            stmt.bindString(22, shopLoginPassWord);
        }
 
        String shopName = entity.getShopName();
        if (shopName != null) {
            stmt.bindString(23, shopName);
        }
 
        String shopPhone = entity.getShopPhone();
        if (shopPhone != null) {
            stmt.bindString(24, shopPhone);
        }
        stmt.bindLong(25, entity.getSort());
 
        String startPrice = entity.getStartPrice();
        if (startPrice != null) {
            stmt.bindString(26, startPrice);
        }
 
        String topTitle = entity.getTopTitle();
        if (topTitle != null) {
            stmt.bindString(27, topTitle);
        }
        stmt.bindLong(28, entity.getVipDiscountFlag());
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(29, token);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // boxPrice
            cursor.getInt(offset + 2), // getModelFlag
            cursor.getInt(offset + 3), // tsModelFlag
            cursor.getInt(offset + 4), // id
            cursor.getInt(offset + 5), // isDelete
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lat
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // lng
            cursor.getInt(offset + 8), // openFlag
            cursor.getDouble(offset + 9), // rate
            cursor.getInt(offset + 10), // schoolId
            cursor.getInt(offset + 11), // score
            cursor.getInt(offset + 12), // sendModelFlag
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // sendPrice
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // sendPriceAdd
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // sendPriceAddByCountFlag
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // sendTime
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // shopAddress
            cursor.getInt(offset + 18), // shopCategoryId
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // shopImage
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // shopLoginName
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // shopLoginPassWord
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // shopName
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // shopPhone
            cursor.getLong(offset + 24), // sort
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // startPrice
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // topTitle
            cursor.getInt(offset + 27), // vipDiscountFlag
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28) // token
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.set_id(cursor.getLong(offset + 0));
        entity.setBoxPrice(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGetModelFlag(cursor.getInt(offset + 2));
        entity.setTsModelFlag(cursor.getInt(offset + 3));
        entity.setId(cursor.getInt(offset + 4));
        entity.setIsDelete(cursor.getInt(offset + 5));
        entity.setLat(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLng(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOpenFlag(cursor.getInt(offset + 8));
        entity.setRate(cursor.getDouble(offset + 9));
        entity.setSchoolId(cursor.getInt(offset + 10));
        entity.setScore(cursor.getInt(offset + 11));
        entity.setSendModelFlag(cursor.getInt(offset + 12));
        entity.setSendPrice(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSendPriceAdd(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSendPriceAddByCountFlag(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSendTime(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setShopAddress(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setShopCategoryId(cursor.getInt(offset + 18));
        entity.setShopImage(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setShopLoginName(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setShopLoginPassWord(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setShopName(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setShopPhone(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setSort(cursor.getLong(offset + 24));
        entity.setStartPrice(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setTopTitle(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setVipDiscountFlag(cursor.getInt(offset + 27));
        entity.setToken(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
